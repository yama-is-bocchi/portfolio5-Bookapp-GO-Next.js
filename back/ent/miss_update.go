// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Bookapp/ent/miss"
	"Bookapp/ent/predicate"
	"Bookapp/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MissUpdate is the builder for updating Miss entities.
type MissUpdate struct {
	config
	hooks    []Hook
	mutation *MissMutation
}

// Where appends a list predicates to the MissUpdate builder.
func (mu *MissUpdate) Where(ps ...predicate.Miss) *MissUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MissUpdate) SetUserID(i int) *MissUpdate {
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MissUpdate) SetNillableUserID(i *int) *MissUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// SetCount sets the "count" field.
func (mu *MissUpdate) SetCount(i int) *MissUpdate {
	mu.mutation.ResetCount()
	mu.mutation.SetCount(i)
	return mu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (mu *MissUpdate) SetNillableCount(i *int) *MissUpdate {
	if i != nil {
		mu.SetCount(*i)
	}
	return mu
}

// AddCount adds i to the "count" field.
func (mu *MissUpdate) AddCount(i int) *MissUpdate {
	mu.mutation.AddCount(i)
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MissUpdate) SetUser(u *User) *MissUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MissMutation object of the builder.
func (mu *MissUpdate) Mutation() *MissMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MissUpdate) ClearUser() *MissUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MissUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MissUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MissUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MissUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MissUpdate) check() error {
	if v, ok := mu.mutation.Count(); ok {
		if err := miss.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "Miss.count": %w`, err)}
		}
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Miss.user"`)
	}
	return nil
}

func (mu *MissUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(miss.Table, miss.Columns, sqlgraph.NewFieldSpec(miss.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Count(); ok {
		_spec.SetField(miss.FieldCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedCount(); ok {
		_spec.AddField(miss.FieldCount, field.TypeInt, value)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   miss.UserTable,
			Columns: []string{miss.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   miss.UserTable,
			Columns: []string{miss.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miss.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MissUpdateOne is the builder for updating a single Miss entity.
type MissUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MissMutation
}

// SetUserID sets the "user_id" field.
func (muo *MissUpdateOne) SetUserID(i int) *MissUpdateOne {
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MissUpdateOne) SetNillableUserID(i *int) *MissUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// SetCount sets the "count" field.
func (muo *MissUpdateOne) SetCount(i int) *MissUpdateOne {
	muo.mutation.ResetCount()
	muo.mutation.SetCount(i)
	return muo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (muo *MissUpdateOne) SetNillableCount(i *int) *MissUpdateOne {
	if i != nil {
		muo.SetCount(*i)
	}
	return muo
}

// AddCount adds i to the "count" field.
func (muo *MissUpdateOne) AddCount(i int) *MissUpdateOne {
	muo.mutation.AddCount(i)
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MissUpdateOne) SetUser(u *User) *MissUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MissMutation object of the builder.
func (muo *MissUpdateOne) Mutation() *MissMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MissUpdateOne) ClearUser() *MissUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MissUpdate builder.
func (muo *MissUpdateOne) Where(ps ...predicate.Miss) *MissUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MissUpdateOne) Select(field string, fields ...string) *MissUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Miss entity.
func (muo *MissUpdateOne) Save(ctx context.Context) (*Miss, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MissUpdateOne) SaveX(ctx context.Context) *Miss {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MissUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MissUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MissUpdateOne) check() error {
	if v, ok := muo.mutation.Count(); ok {
		if err := miss.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "Miss.count": %w`, err)}
		}
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Miss.user"`)
	}
	return nil
}

func (muo *MissUpdateOne) sqlSave(ctx context.Context) (_node *Miss, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(miss.Table, miss.Columns, sqlgraph.NewFieldSpec(miss.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Miss.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, miss.FieldID)
		for _, f := range fields {
			if !miss.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != miss.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Count(); ok {
		_spec.SetField(miss.FieldCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedCount(); ok {
		_spec.AddField(miss.FieldCount, field.TypeInt, value)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   miss.UserTable,
			Columns: []string{miss.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   miss.UserTable,
			Columns: []string{miss.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Miss{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miss.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
