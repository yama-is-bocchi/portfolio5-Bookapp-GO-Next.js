// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Bookapp/ent/predicate"
	"Bookapp/ent/suggestbook"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SuggestBookUpdate is the builder for updating SuggestBook entities.
type SuggestBookUpdate struct {
	config
	hooks    []Hook
	mutation *SuggestBookMutation
}

// Where appends a list predicates to the SuggestBookUpdate builder.
func (sbu *SuggestBookUpdate) Where(ps ...predicate.SuggestBook) *SuggestBookUpdate {
	sbu.mutation.Where(ps...)
	return sbu
}

// SetTitle sets the "title" field.
func (sbu *SuggestBookUpdate) SetTitle(s string) *SuggestBookUpdate {
	sbu.mutation.SetTitle(s)
	return sbu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sbu *SuggestBookUpdate) SetNillableTitle(s *string) *SuggestBookUpdate {
	if s != nil {
		sbu.SetTitle(*s)
	}
	return sbu
}

// SetKind sets the "kind" field.
func (sbu *SuggestBookUpdate) SetKind(s string) *SuggestBookUpdate {
	sbu.mutation.SetKind(s)
	return sbu
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (sbu *SuggestBookUpdate) SetNillableKind(s *string) *SuggestBookUpdate {
	if s != nil {
		sbu.SetKind(*s)
	}
	return sbu
}

// SetPrice sets the "price" field.
func (sbu *SuggestBookUpdate) SetPrice(i int) *SuggestBookUpdate {
	sbu.mutation.ResetPrice()
	sbu.mutation.SetPrice(i)
	return sbu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sbu *SuggestBookUpdate) SetNillablePrice(i *int) *SuggestBookUpdate {
	if i != nil {
		sbu.SetPrice(*i)
	}
	return sbu
}

// AddPrice adds i to the "price" field.
func (sbu *SuggestBookUpdate) AddPrice(i int) *SuggestBookUpdate {
	sbu.mutation.AddPrice(i)
	return sbu
}

// SetMemo sets the "memo" field.
func (sbu *SuggestBookUpdate) SetMemo(s string) *SuggestBookUpdate {
	sbu.mutation.SetMemo(s)
	return sbu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sbu *SuggestBookUpdate) SetNillableMemo(s *string) *SuggestBookUpdate {
	if s != nil {
		sbu.SetMemo(*s)
	}
	return sbu
}

// Mutation returns the SuggestBookMutation object of the builder.
func (sbu *SuggestBookUpdate) Mutation() *SuggestBookMutation {
	return sbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbu *SuggestBookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sbu.sqlSave, sbu.mutation, sbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbu *SuggestBookUpdate) SaveX(ctx context.Context) int {
	affected, err := sbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbu *SuggestBookUpdate) Exec(ctx context.Context) error {
	_, err := sbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbu *SuggestBookUpdate) ExecX(ctx context.Context) {
	if err := sbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbu *SuggestBookUpdate) check() error {
	if v, ok := sbu.mutation.Kind(); ok {
		if err := suggestbook.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "SuggestBook.kind": %w`, err)}
		}
	}
	if v, ok := sbu.mutation.Price(); ok {
		if err := suggestbook.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "SuggestBook.price": %w`, err)}
		}
	}
	return nil
}

func (sbu *SuggestBookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(suggestbook.Table, suggestbook.Columns, sqlgraph.NewFieldSpec(suggestbook.FieldID, field.TypeInt))
	if ps := sbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbu.mutation.Title(); ok {
		_spec.SetField(suggestbook.FieldTitle, field.TypeString, value)
	}
	if value, ok := sbu.mutation.Kind(); ok {
		_spec.SetField(suggestbook.FieldKind, field.TypeString, value)
	}
	if value, ok := sbu.mutation.Price(); ok {
		_spec.SetField(suggestbook.FieldPrice, field.TypeInt, value)
	}
	if value, ok := sbu.mutation.AddedPrice(); ok {
		_spec.AddField(suggestbook.FieldPrice, field.TypeInt, value)
	}
	if value, ok := sbu.mutation.Memo(); ok {
		_spec.SetField(suggestbook.FieldMemo, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{suggestbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sbu.mutation.done = true
	return n, nil
}

// SuggestBookUpdateOne is the builder for updating a single SuggestBook entity.
type SuggestBookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SuggestBookMutation
}

// SetTitle sets the "title" field.
func (sbuo *SuggestBookUpdateOne) SetTitle(s string) *SuggestBookUpdateOne {
	sbuo.mutation.SetTitle(s)
	return sbuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (sbuo *SuggestBookUpdateOne) SetNillableTitle(s *string) *SuggestBookUpdateOne {
	if s != nil {
		sbuo.SetTitle(*s)
	}
	return sbuo
}

// SetKind sets the "kind" field.
func (sbuo *SuggestBookUpdateOne) SetKind(s string) *SuggestBookUpdateOne {
	sbuo.mutation.SetKind(s)
	return sbuo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (sbuo *SuggestBookUpdateOne) SetNillableKind(s *string) *SuggestBookUpdateOne {
	if s != nil {
		sbuo.SetKind(*s)
	}
	return sbuo
}

// SetPrice sets the "price" field.
func (sbuo *SuggestBookUpdateOne) SetPrice(i int) *SuggestBookUpdateOne {
	sbuo.mutation.ResetPrice()
	sbuo.mutation.SetPrice(i)
	return sbuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sbuo *SuggestBookUpdateOne) SetNillablePrice(i *int) *SuggestBookUpdateOne {
	if i != nil {
		sbuo.SetPrice(*i)
	}
	return sbuo
}

// AddPrice adds i to the "price" field.
func (sbuo *SuggestBookUpdateOne) AddPrice(i int) *SuggestBookUpdateOne {
	sbuo.mutation.AddPrice(i)
	return sbuo
}

// SetMemo sets the "memo" field.
func (sbuo *SuggestBookUpdateOne) SetMemo(s string) *SuggestBookUpdateOne {
	sbuo.mutation.SetMemo(s)
	return sbuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sbuo *SuggestBookUpdateOne) SetNillableMemo(s *string) *SuggestBookUpdateOne {
	if s != nil {
		sbuo.SetMemo(*s)
	}
	return sbuo
}

// Mutation returns the SuggestBookMutation object of the builder.
func (sbuo *SuggestBookUpdateOne) Mutation() *SuggestBookMutation {
	return sbuo.mutation
}

// Where appends a list predicates to the SuggestBookUpdate builder.
func (sbuo *SuggestBookUpdateOne) Where(ps ...predicate.SuggestBook) *SuggestBookUpdateOne {
	sbuo.mutation.Where(ps...)
	return sbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbuo *SuggestBookUpdateOne) Select(field string, fields ...string) *SuggestBookUpdateOne {
	sbuo.fields = append([]string{field}, fields...)
	return sbuo
}

// Save executes the query and returns the updated SuggestBook entity.
func (sbuo *SuggestBookUpdateOne) Save(ctx context.Context) (*SuggestBook, error) {
	return withHooks(ctx, sbuo.sqlSave, sbuo.mutation, sbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbuo *SuggestBookUpdateOne) SaveX(ctx context.Context) *SuggestBook {
	node, err := sbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbuo *SuggestBookUpdateOne) Exec(ctx context.Context) error {
	_, err := sbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbuo *SuggestBookUpdateOne) ExecX(ctx context.Context) {
	if err := sbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbuo *SuggestBookUpdateOne) check() error {
	if v, ok := sbuo.mutation.Kind(); ok {
		if err := suggestbook.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "SuggestBook.kind": %w`, err)}
		}
	}
	if v, ok := sbuo.mutation.Price(); ok {
		if err := suggestbook.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "SuggestBook.price": %w`, err)}
		}
	}
	return nil
}

func (sbuo *SuggestBookUpdateOne) sqlSave(ctx context.Context) (_node *SuggestBook, err error) {
	if err := sbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(suggestbook.Table, suggestbook.Columns, sqlgraph.NewFieldSpec(suggestbook.FieldID, field.TypeInt))
	id, ok := sbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SuggestBook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, suggestbook.FieldID)
		for _, f := range fields {
			if !suggestbook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != suggestbook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbuo.mutation.Title(); ok {
		_spec.SetField(suggestbook.FieldTitle, field.TypeString, value)
	}
	if value, ok := sbuo.mutation.Kind(); ok {
		_spec.SetField(suggestbook.FieldKind, field.TypeString, value)
	}
	if value, ok := sbuo.mutation.Price(); ok {
		_spec.SetField(suggestbook.FieldPrice, field.TypeInt, value)
	}
	if value, ok := sbuo.mutation.AddedPrice(); ok {
		_spec.AddField(suggestbook.FieldPrice, field.TypeInt, value)
	}
	if value, ok := sbuo.mutation.Memo(); ok {
		_spec.SetField(suggestbook.FieldMemo, field.TypeString, value)
	}
	_node = &SuggestBook{config: sbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{suggestbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbuo.mutation.done = true
	return _node, nil
}
