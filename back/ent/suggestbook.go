// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Bookapp/ent/suggestbook"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SuggestBook is the model entity for the SuggestBook schema.
type SuggestBook struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo         string `json:"memo,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SuggestBook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case suggestbook.FieldID, suggestbook.FieldPrice:
			values[i] = new(sql.NullInt64)
		case suggestbook.FieldTitle, suggestbook.FieldKind, suggestbook.FieldMemo:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SuggestBook fields.
func (sb *SuggestBook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case suggestbook.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sb.ID = int(value.Int64)
		case suggestbook.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sb.Title = value.String
			}
		case suggestbook.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				sb.Kind = value.String
			}
		case suggestbook.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				sb.Price = int(value.Int64)
			}
		case suggestbook.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				sb.Memo = value.String
			}
		default:
			sb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SuggestBook.
// This includes values selected through modifiers, order, etc.
func (sb *SuggestBook) Value(name string) (ent.Value, error) {
	return sb.selectValues.Get(name)
}

// Update returns a builder for updating this SuggestBook.
// Note that you need to call SuggestBook.Unwrap() before calling this method if this SuggestBook
// was returned from a transaction, and the transaction was committed or rolled back.
func (sb *SuggestBook) Update() *SuggestBookUpdateOne {
	return NewSuggestBookClient(sb.config).UpdateOne(sb)
}

// Unwrap unwraps the SuggestBook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sb *SuggestBook) Unwrap() *SuggestBook {
	_tx, ok := sb.config.driver.(*txDriver)
	if !ok {
		panic("ent: SuggestBook is not a transactional entity")
	}
	sb.config.driver = _tx.drv
	return sb
}

// String implements the fmt.Stringer.
func (sb *SuggestBook) String() string {
	var builder strings.Builder
	builder.WriteString("SuggestBook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sb.ID))
	builder.WriteString("title=")
	builder.WriteString(sb.Title)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(sb.Kind)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", sb.Price))
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(sb.Memo)
	builder.WriteByte(')')
	return builder.String()
}

// SuggestBooks is a parsable slice of SuggestBook.
type SuggestBooks []*SuggestBook
