// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AdminsColumns holds the columns for the "admins" table.
	AdminsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
	}
	// AdminsTable holds the schema information for the "admins" table.
	AdminsTable = &schema.Table{
		Name:       "admins",
		Columns:    AdminsColumns,
		PrimaryKey: []*schema.Column{AdminsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "admins_users_admins",
				Columns:    []*schema.Column{AdminsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BooksColumns holds the columns for the "books" table.
	BooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "kind", Type: field.TypeString},
		{Name: "memo", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt},
	}
	// BooksTable holds the schema information for the "books" table.
	BooksTable = &schema.Table{
		Name:       "books",
		Columns:    BooksColumns,
		PrimaryKey: []*schema.Column{BooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "books_users_books",
				Columns:    []*schema.Column{BooksColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LocksColumns holds the columns for the "locks" table.
	LocksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "date", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// LocksTable holds the schema information for the "locks" table.
	LocksTable = &schema.Table{
		Name:       "locks",
		Columns:    LocksColumns,
		PrimaryKey: []*schema.Column{LocksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "locks_users_locks",
				Columns:    []*schema.Column{LocksColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// MissesColumns holds the columns for the "misses" table.
	MissesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "count", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// MissesTable holds the schema information for the "misses" table.
	MissesTable = &schema.Table{
		Name:       "misses",
		Columns:    MissesColumns,
		PrimaryKey: []*schema.Column{MissesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "misses_users_misses",
				Columns:    []*schema.Column{MissesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SuggestBooksColumns holds the columns for the "suggest_books" table.
	SuggestBooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Unique: true},
		{Name: "kind", Type: field.TypeString},
		{Name: "price", Type: field.TypeInt},
		{Name: "memo", Type: field.TypeString},
	}
	// SuggestBooksTable holds the schema information for the "suggest_books" table.
	SuggestBooksTable = &schema.Table{
		Name:       "suggest_books",
		Columns:    SuggestBooksColumns,
		PrimaryKey: []*schema.Column{SuggestBooksColumns[0]},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "acces_date", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AdminsTable,
		BooksTable,
		LocksTable,
		MissesTable,
		SuggestBooksTable,
		TokensTable,
		UsersTable,
	}
)

func init() {
	AdminsTable.ForeignKeys[0].RefTable = UsersTable
	BooksTable.ForeignKeys[0].RefTable = UsersTable
	LocksTable.ForeignKeys[0].RefTable = UsersTable
	MissesTable.ForeignKeys[0].RefTable = UsersTable
	TokensTable.ForeignKeys[0].RefTable = UsersTable
}
