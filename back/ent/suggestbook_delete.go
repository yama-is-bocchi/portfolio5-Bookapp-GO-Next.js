// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Bookapp/ent/predicate"
	"Bookapp/ent/suggestbook"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SuggestBookDelete is the builder for deleting a SuggestBook entity.
type SuggestBookDelete struct {
	config
	hooks    []Hook
	mutation *SuggestBookMutation
}

// Where appends a list predicates to the SuggestBookDelete builder.
func (sbd *SuggestBookDelete) Where(ps ...predicate.SuggestBook) *SuggestBookDelete {
	sbd.mutation.Where(ps...)
	return sbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sbd *SuggestBookDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sbd.sqlExec, sbd.mutation, sbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sbd *SuggestBookDelete) ExecX(ctx context.Context) int {
	n, err := sbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sbd *SuggestBookDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(suggestbook.Table, sqlgraph.NewFieldSpec(suggestbook.FieldID, field.TypeInt))
	if ps := sbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sbd.mutation.done = true
	return affected, err
}

// SuggestBookDeleteOne is the builder for deleting a single SuggestBook entity.
type SuggestBookDeleteOne struct {
	sbd *SuggestBookDelete
}

// Where appends a list predicates to the SuggestBookDelete builder.
func (sbdo *SuggestBookDeleteOne) Where(ps ...predicate.SuggestBook) *SuggestBookDeleteOne {
	sbdo.sbd.mutation.Where(ps...)
	return sbdo
}

// Exec executes the deletion query.
func (sbdo *SuggestBookDeleteOne) Exec(ctx context.Context) error {
	n, err := sbdo.sbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{suggestbook.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sbdo *SuggestBookDeleteOne) ExecX(ctx context.Context) {
	if err := sbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
