// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Bookapp/ent/suggestbook"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SuggestBookCreate is the builder for creating a SuggestBook entity.
type SuggestBookCreate struct {
	config
	mutation *SuggestBookMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (sbc *SuggestBookCreate) SetTitle(s string) *SuggestBookCreate {
	sbc.mutation.SetTitle(s)
	return sbc
}

// SetKind sets the "kind" field.
func (sbc *SuggestBookCreate) SetKind(s string) *SuggestBookCreate {
	sbc.mutation.SetKind(s)
	return sbc
}

// SetPrice sets the "price" field.
func (sbc *SuggestBookCreate) SetPrice(i int) *SuggestBookCreate {
	sbc.mutation.SetPrice(i)
	return sbc
}

// SetMemo sets the "memo" field.
func (sbc *SuggestBookCreate) SetMemo(s string) *SuggestBookCreate {
	sbc.mutation.SetMemo(s)
	return sbc
}

// Mutation returns the SuggestBookMutation object of the builder.
func (sbc *SuggestBookCreate) Mutation() *SuggestBookMutation {
	return sbc.mutation
}

// Save creates the SuggestBook in the database.
func (sbc *SuggestBookCreate) Save(ctx context.Context) (*SuggestBook, error) {
	return withHooks(ctx, sbc.sqlSave, sbc.mutation, sbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sbc *SuggestBookCreate) SaveX(ctx context.Context) *SuggestBook {
	v, err := sbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbc *SuggestBookCreate) Exec(ctx context.Context) error {
	_, err := sbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbc *SuggestBookCreate) ExecX(ctx context.Context) {
	if err := sbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbc *SuggestBookCreate) check() error {
	if _, ok := sbc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SuggestBook.title"`)}
	}
	if _, ok := sbc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "SuggestBook.kind"`)}
	}
	if v, ok := sbc.mutation.Kind(); ok {
		if err := suggestbook.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "SuggestBook.kind": %w`, err)}
		}
	}
	if _, ok := sbc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "SuggestBook.price"`)}
	}
	if v, ok := sbc.mutation.Price(); ok {
		if err := suggestbook.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "SuggestBook.price": %w`, err)}
		}
	}
	if _, ok := sbc.mutation.Memo(); !ok {
		return &ValidationError{Name: "memo", err: errors.New(`ent: missing required field "SuggestBook.memo"`)}
	}
	return nil
}

func (sbc *SuggestBookCreate) sqlSave(ctx context.Context) (*SuggestBook, error) {
	if err := sbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sbc.mutation.id = &_node.ID
	sbc.mutation.done = true
	return _node, nil
}

func (sbc *SuggestBookCreate) createSpec() (*SuggestBook, *sqlgraph.CreateSpec) {
	var (
		_node = &SuggestBook{config: sbc.config}
		_spec = sqlgraph.NewCreateSpec(suggestbook.Table, sqlgraph.NewFieldSpec(suggestbook.FieldID, field.TypeInt))
	)
	if value, ok := sbc.mutation.Title(); ok {
		_spec.SetField(suggestbook.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sbc.mutation.Kind(); ok {
		_spec.SetField(suggestbook.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := sbc.mutation.Price(); ok {
		_spec.SetField(suggestbook.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := sbc.mutation.Memo(); ok {
		_spec.SetField(suggestbook.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	return _node, _spec
}

// SuggestBookCreateBulk is the builder for creating many SuggestBook entities in bulk.
type SuggestBookCreateBulk struct {
	config
	err      error
	builders []*SuggestBookCreate
}

// Save creates the SuggestBook entities in the database.
func (sbcb *SuggestBookCreateBulk) Save(ctx context.Context) ([]*SuggestBook, error) {
	if sbcb.err != nil {
		return nil, sbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sbcb.builders))
	nodes := make([]*SuggestBook, len(sbcb.builders))
	mutators := make([]Mutator, len(sbcb.builders))
	for i := range sbcb.builders {
		func(i int, root context.Context) {
			builder := sbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SuggestBookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbcb *SuggestBookCreateBulk) SaveX(ctx context.Context) []*SuggestBook {
	v, err := sbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbcb *SuggestBookCreateBulk) Exec(ctx context.Context) error {
	_, err := sbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbcb *SuggestBookCreateBulk) ExecX(ctx context.Context) {
	if err := sbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
